{
	"//": "Copyright 2023 Neen S.p.A.",
	"Team": {
		"Advice": "For successful DevOps adoption, the organisation needs to be structured into teams that are both cross-functional and autonomous.",
		"ReadMore": "Many organisational structures are characterised by and aligned to functions (specialisms) rather than the outcomes that are needed for the business. The issue with function-based organisational structures is that they tend to create a lot of handovers between teams; things get thrown over the fence for the next team to deal with, generally by complaining about the quality from the previous team and using up all the time of the team after them. This doesn't support the development of a collaborative culture. Improve the organisational structure and both quality and flow will improve.",
		"Links": [
			{
				"Type": "Blog",
				"Text": "The Benefits of Feature Teams by Mike Cohn",
				"Href": "https://www.mountaingoatsoftware.com/blog/the-benefits-of-feature-teams"
			},
			{
				"Type": "Article",
				"Text": "Enterprise DevOps: Building a Service Oriented Organisation (Atos Whitepaper)",
				"Href": "https://atos.net/wp-content/uploads/2017/01/DevOps_Building_a_Service_Oriented_Organization-White-Paper-web-FINAL-281116.pdf"
			},
			{
				"Type": "Video",
				"Text": "Spotify Engineering Culture",
				"Href": "https://vimeo.com/85490944"
			},
			{
				"Type": "Book",
				"Text": "Migrating to Cloud-Native Application Architectures by Matt Stine",
				"Href": "https://download3.vmware.com/vmworld/2015/downloads/oreilly-cloud-native-archx.pdf"
			},
			{
				"Type": "Book",
				"Text": "The Phoenix Project by Gene Kim, Kevin Behr and George Spafford",
				"Href": "https://www.amazon.com/Phoenix-Project-DevOps-Helping-Business/dp/0988262592",
				"Paid": "Yes"
			}
		]
	},
	"Process": {
		"Advice": "A great place to start is by reading the Agile Manifesto. Scrum is a popular Agile software development framework which is a great approach when setting up a new team if there isn't already an existing way of working. Kanban is an evolutionary method for improving a team's agility, and works well when the team already has an existing way of working in place.",
		"Links": [
			{
				"Type": "Website",
				"Text": "Agile Manifesto",
				"Href": "http://agilemanifesto.org/"
			},
			{
				"Type": "Video",
				"Text": "Explaining Agile - Martin Fowler and Neal Ford at USI (0:43)",
				"Href": "https://www.youtube.com/watch?v=GE6lbPLEAzc"
			},
			{
				"Type": "Video",
				"Text": "The Systems Thinking Approach to Introducing Kanban - David Anderson (1:31)",
				"Href": "https://vimeo.com/46272041"
			},
			{
				"Type": "Book",
				"Text": "The Scrum Guide by Ken Schwaber and Jeff Sutherland",
				"Href": "http://www.scrumguides.org/index.html"
			},
			{
				"Type": "Book",
				"Text": "Succeeding with Agile: Software Development Using Scrum by Mike Cohn",
				"Href": "https://www.amazon.com/Succeeding-Agile-Software-Development-Using/dp/0321579364",
				"Paid": "Yes"
			},
			{
				"Type": "Book",
				"Text": "Kanban: Successful Evolutionary Change for Your Technology Business by David Anderson",
				"Href": "https://www.amazon.com/Kanban-Successful-Evolutionary-Technology-Business/dp/0984521402",
				"Paid": "Yes"
			}
		]
	},
	"Architecture": {
		"Advice": "For DevOps adoption personal incentives are less effective at driving the desired behaviors than team incentives. Within a DevOps approach, one wishes to drive ownership of the product/outcomes and the understanding that those successfully adopting DevOps will \"live and die\" as a team; this aligns earnings with collaboration, not competition.",
		"ReadMore": "<p />Incentives are just about the most controversial topic for any organisation, and there are many possible approaches. Making significant changes to incentive structures, especially in large organisations, can be hugely disruptive, controversial and, in some cases, require agreement from unions/employee forums, thus there is no perfect implementation we can recommend. Our advice, however, is to take a fresh look at the existing incentives within the organisation and ensure that they are aligned as much as possible to the outcomes that the organisation is looking to achieve through DevOps. <p />Some organisations have removed all personal incentives in favour of team only incentives, others are constrained within a traditional incentive framework/structure, but can make simple changes like giving weight to actions that support others within the team. What is to be avoided is giving a bonus to the person that turns up at 3:30am and gets a system back up again, rather than rewarding the person who identifies and fixes the issue at its root cause so it doesn’t fall over again; this is an alarmingly common flaw in may incentive structures. <p />Question whether incentives can be used effectively to drive not only DevOps adoption, but tighter unity and collaboration within the DevOps teams themselves. Failing to do so frequently results in team members sticking to their tribes, e.g. \"I'm a Dev, I'm not doing Ops work/going on call.\"",
		"Links": [
			{
				"Type": "Website",
				"Text": "Management 3.0",
				"Href": "https://management30.com"
			},
			{
				"Type": "Video",
				"Text": "DevOpsChat: \"Giving a Damn\" interview with Pawel Brodzinski (00:34)",
				"Href": "https://www.youtube.com/watch?v=tY4_OTj46h8"
			},
			{
				"Type": "Blog",
				"Text": "Introducing Open Salaries at Buffer: Our Transparent Formula and All Individual Salaries by Joel Gascoigne",
				"Href": "https://open.buffer.com/introducing-open-salaries-at-buffer-including-our-transparent-formula-and-all-individual-salaries/"
			},
			{
				"Type": "Website",
				"Text": "Holocracy.org",
				"Href": "https://www.holacracy.org/"
			},
			{
				"Type": "Book",
				"Text": "Accelerate: The Science of Lean Software and DevOps: Building and Scaling High Performing Technology Organisations by Gene Kim, Jez Humble and Nicole Forsgren",
				"Href": "https://www.amazon.co.uk/dp/1942788339/",
				"Paid": "Yes"
			}
		]
	},
	"Provisioning": {
		"Advice": "Automation is critical to shortening the lead time for software delivery. If quality and speed are to be transformed, automation is essential. Automation enables environments to be provisioned and configured identically every time. Automation enables application code to be built, tested, delivered, provisioned and configured easily. Automation also enables environments to be monitored and incidents (including security threats) to be responded to based upon a set of rules. Automation drives consistency, enforces quality, removes wastage and delivers speed; it is the technical backbone to any DevOps implementation.",
		"ReadMore": "The general rule of thumb is to automate anything that you’re doing more than once, however there are diminishing returns that will be experienced and it produces a new code base to maintain. Surprisingly, adopting a clear and well communicated automation strategy is not necessarily key to successful adoption and buy-in from engineering teams, although it is certainly valuable to have one. The question is more about timing than anything else, but in certain areas (e.g. Infrastructure as Code) automation is one of those things that generally builds pace organically. Start small with engineering led experimentation as, generally, engineers see the value in automation. We suggest that you: <p />- Encourage automation of the day to day (something that may save 20 minutes but is done several times per week, as once the benefits are seen, automating things becomes addictive) <p />- Catalyse discussions of automation tooling choices via communities of interest, these will eventually generate standards in coding, practices, processes and principles <p />- Continuously review automation as part of retrospectives <p />- Communicate automation successes and failures (both can be learned from!) <p />- Follow good engineering practices: for example, maintain automation code in a version controlled code repository <p />When making the case for automation, it is not necessarily about the cost saving (almost certainly not based upon the status quo). For example, the business case for test automation based upon the current release frequency may not make sense, but if that release frequency shifts to once per day it would do. It’s not just about release frequency either, automation significantly reduces wastage within the system, measuring the mean time to recovery (MTTR) and the number of defects in production will display the benefit of automation here. Ultimately the benefits of automation are speed and consistency.",
		"Links": [
			{
				"Type": "Book",
				"Text": "Get started with Red Hat Ansible Automation Platform",
				"Href": "https://www.ansible.com/resources/ebooks/get-started-with-red-hat-ansible-tower"
			},
			{
				"Type": "Article",
				"Text": "Various Ansible Whitepapers",
				"Href": "https://www.ansible.com/resources/whitepapers"
			},
			{
				"Type": "Blog",
				"Text": "DevOps: Don't create the haystack by Chris Baynham-Hughes",
				"Href": "https://www.linkedin.com/pulse/devops-dont-create-haystack-chris-baynham-hughes/"
			},
			{
				"Type": "Blog",
				"Text": "Putting The Dev Into DevOps: Why Your Developers Should Write Terraform Too by Luke Kysow",
				"Href": "https://medium.com/runatlantis/putting-the-dev-into-devops-why-your-developers-should-write-terraform-too-d3c079dfc6a8"
			},
			{
				"Type": "Article",
				"Text": "Data Center Automation (Atos Whitepaper)",
				"Href": "https://atos.net/wp-content/uploads/2018/09/atos-wp-datacenter-automation.pdf"
			}
		]
	},
	"Security": {
		"Advice": "Static code analysis is the analysis of software without executing the compiled program. In most cases the analysis is performed on a version of the source code but, in other cases, object code is used. Static analysis helps to improve code quality by reporting possible code bugs, code smells, memory leaks, software metrics and security vulnerabilities.",
		"Links": [
			{
				"Type": "Video",
				"Text": "Static Code Analysis: Scan All Your Code For Bugs - Dr. Jared DeMott (0:19)",
				"Href": "https://www.youtube.com/watch?v=Heor8BVa4A0"
			},
			{
				"Type": "Website",
				"Text": "SonarQube",
				"Href": "https://www.sonarqube.org/"
			},
			{
				"Type": "Website",
				"Text": "Coverity Scan",
				"Href": "https://scan.coverity.com/"
			},
			{
				"Type": "Website",
				"Text": "Klocwork",
				"Href": "https://www.roguewave.com/products-services/klocwork"
			}
		]
	},
	"Development": {
		"Advice": "Adopting development best practices, like testing and code review is a best practice you cannot avoid to improve your DevOps skills. Take a tour on the below resources to improve your ability!",
		"Links": [
			{
				"Type": "Blog",
				"Text": "Code Reviews: Just Do It by Jeff Atwood",
				"Href": "https://blog.codinghorror.com/code-reviews-just-do-it/"
			},
			{
				"Type": "Website",
				"Text": "Refactoring.com",
				"Href": "https://refactoring.com/"
			},
			{
				"Type": "Video",
				"Text": "Code Refactoring: Learn Code Smells And Level Up Your Game! - Sandi Metz (0:36)",
				"Href": "https://www.youtube.com/watch?v=D4auWwMsEnY"
			},
			{
				"Type": "Blog",
				"Text": "TestPyramid by Martin Fowler",
				"Href": "https://martinfowler.com/bliki/TestPyramid.html"
			},
			{
				"Type": "Article",
				"Text": "The Practical Test Pyramid by Martin Fowler",
				"Href": "https://martinfowler.com/articles/practical-test-pyramid.html"
			},
			{
				"Type": "Video",
				"Text": "Automation Testing Tutorial for Beginners (0:07)",
				"Href": "https://www.youtube.com/watch?v=RbSlW8jZFe8"
			}
		]
	}
}